# vim: syntax=gitconfig ts=4 sw=4 sts=4 sr noet

[init]
	# Set default branch to 'main'
	defaultBranch = main

# Shortcuts
[alias]
	br = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate
	ci = commit -v
	co = checkout
	d = diff --word-diff
	dc = diff --word-diff --cached
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr by %cn)%Creset' --abbrev-commit --date=relative
	lgs = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr by %cn)%Creset' --abbrev-commit --date=relative --shortstat
	s = stash
	sa = stash apply
	sl = stash list
	sp = stash pop
	st = status -sb
	undo = reset --soft HEAD^

	# Show top 10 contributors
	contrib = !git shortlog -s -n | head -10

	# Get common git ignore patterns. Example: git gi node >> .gitignore
	gi = "!gi() { curl -Ls https://gitignore.io/api/$@ ;}; gi"

	# Stash, update remote, checkout master, rebase, checkout last branch, stash pop
	up = "!f() { git stash && git remote update && git checkout ${1:-master} && git rebase ${2:-origin}/${1:-master} ${1:-master} && git checkout - && git stash pop; }; f"

	# show last commit
	last = "!f() { git lgs -${1:-1} --relative-date --graph HEAD; }; f"

	# Cleanup merged branches
	cleanup = "!f() { git branch --merged | grep -v '(^\\*\\|main\\|dev)' | xargs -n1 git branch -d ; git checkout -q main && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base main $branch) && [[ $(git cherry main $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done; }; f"

	# Initialize a new git repo, add everything, commit init message
	start = !git init . && git add -A && git commit --allow-empty -m \"Initialize repository\"

	# Push all remotes
	pushall = !git remote | xargs -L1 git push --all

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[diff]
	# Detect copies as well as renames
	renames = copies
	# Enable an experimental heuristic that shifts the hunk boundary in an
	# attempt to make the resulting patch easier to read.
	indentHeuristic = true
	tool = meld

[difftool]
	prompt = false

[difftool "meld"]
	cmd = meld "$LOCAL" "$REMOTE"

[core]
	compression = 9
	autocrlf = input
	attributesfile = ~/.config/git/gitattributes

[pager]
	# Don't use pager for stash
	stash = false
	branch = false

[color]
	ui = auto
	status = auto
	branch = auto
	diff = auto

[color "diff"]
	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[merge]
	tool = opendiff
	renameLimit = 0
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# correct typos
[help]
	autocorrect = 1

[branch]
	autosetupmerge = true

# push easily. http://stackoverflow.com/a/23918418/89484
[push]
	default = current
	followTags = true

[pull]
	default = current
	rebase = true

[fetch]
	prune = true

[submodule]
	fetchJobs = 8

[rerere]
	enabled = 1

[credential]
	helper = osxkeychain

[rebase]
	autoStash = true

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

# use separate file for username / github token / etc
[include]
	path = "local"

